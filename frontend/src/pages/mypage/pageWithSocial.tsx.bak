import { useState } from "react";
import { Link } from "react-router-dom";
import {
  mockUsers,
  mockProjects,
  mockFreelancers,
  mockFeedback,
  mockFreelancerApplications,
} from "../../mocks/users";
import Button from "../../components/base/Button";
import Input from "../../components/base/Input";
import Select from "../../components/base/Select";

interface MyPageProps {
  userType?: "client" | "freelancer";
}

export default function MyPage({ userType = "client" }: MyPageProps) {
  const [activeTab, setActiveTab] = useState<
    "profile" | "projects" | "bookmarks" | "feedback" | "social"
  >("profile");
  const [selectedProject, setSelectedProject] = useState<number | null>(null);
  const [projectStatusFilter, setProjectStatusFilter] = useState<
    "all" | "모집중" | "진행중" | "완료"
  >("all");
  const [applicationStatusFilter, setApplicationStatusFilter] = useState<
    "all" | "대기중" | "거절" | "진행중" | "완료"
  >("all");
  const [profileData, setProfileData] = useState(
    userType === "client" ? mockUsers.client : mockUsers.freelancer
  );
  const [selectedImage, setSelectedImage] = useState<string | null>(null);

  // 소셜 계정 연결 상태 관리
  const [socialAccounts, setSocialAccounts] = useState({
    google: {
      connected: true,
      email: "user@gmail.com",
      connectedAt: "2024-01-15",
    },
    kakao: {
      connected: false,
      email: null,
      connectedAt: null,
    },
    naver: {
      connected: true,
      email: "user@naver.com",
      connectedAt: "2024-02-10",
    },
  });

  const tabs =
    userType === "client"
      ? [
          { id: "profile", label: "프로필 관리", icon: "ri-user-3-line" },
          {
            id: "projects",
            label: "프로젝트 관리",
            icon: "ri-briefcase-4-line",
          },
          { id: "bookmarks", label: "관심 프리랜서", icon: "ri-heart-3-line" },
          { id: "feedback", label: "피드백 관리", icon: "ri-star-line" },
          { id: "social", label: "소셜 계정 연결", icon: "ri-links-line" },
        ]
      : [
          { id: "profile", label: "프로필 관리", icon: "ri-user-3-line" },
          { id: "projects", label: "지원 현황", icon: "ri-briefcase-4-line" },
          { id: "bookmarks", label: "관심 프로젝트", icon: "ri-heart-3-line" },
          { id: "feedback", label: "피드백 관리", icon: "ri-star-line" },
          { id: "social", label: "소셜 계정 연결", icon: "ri-links-line" },
        ];

  const handleProfileUpdate = (e: React.FormEvent) => {
    e.preventDefault();
    alert("프로필이 성공적으로 업데이트되었습니다!");
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        setSelectedImage(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // 소셜 계정 연결/해제 함수
  const handleSocialConnect = (provider: "google" | "kakao" | "naver") => {
    if (socialAccounts[provider].connected) {
      // 연결 해제
      const confirmed = confirm(
        `${provider.toUpperCase()} 계정 연결을 해제하시겠습니까?`
      );
      if (confirmed) {
        setSocialAccounts((prev) => ({
          ...prev,
          [provider]: {
            connected: false,
            email: null,
            connectedAt: null,
          },
        }));
        alert(`${provider.toUpperCase()} 계정 연결이 해제되었습니다.`);
      }
    } else {
      // 연결
      const mockEmail = `user@${
        provider === "google" ? "gmail.com" : provider + ".com"
      }`;
      setSocialAccounts((prev) => ({
        ...prev,
        [provider]: {
          connected: true,
          email: mockEmail,
          connectedAt: new Date().toISOString().split("T")[0],
        },
      }));
      alert(`${provider.toUpperCase()} 계정이 연결되었습니다.`);
    }
  };

  const myProjects = mockProjects.filter((p) => p.clientId === 1);
  const completedProjects = myProjects.filter((p) => p.status === "완료");

  // 프로젝트 상태별 필터링
  const filteredProjects =
    projectStatusFilter === "all"
      ? myProjects
      : myProjects.filter((p) => p.status === projectStatusFilter);

  // 프리랜서의 지원 현황 필터링
  const filteredApplications =
    applicationStatusFilter === "all"
      ? mockFreelancerApplications
      : mockFreelancerApplications.filter(
          (app) => app.status === applicationStatusFilter
        );

  // 프로젝트 상태 변경
  const updateProjectStatus = (projectId: number, newStatus: string) => {
    console.log(`프로젝트 ${projectId} 상태를 ${newStatus}로 변경`);
    alert(`프로젝트 상태가 ${newStatus}로 변경되었습니다.`);
  };

  // 북마크된 프리랜서/프로젝트 (임시 데이터)
  const bookmarkedFreelancers = mockFreelancers.slice(0, 3);
  const bookmarkedProjects = mockProjects.slice(0, 3);

  const removeBookmark = (id: number, type: "freelancer" | "project") => {
    console.log(`${type} ${id} 북마크 해제`);
    alert("북마크가 해제되었습니다.");
  };

  const updateApplicantStatus = (
    applicantId: number,
    status: "approved" | "rejected"
  ) => {
    console.log(`지원자 ${applicantId} 상태를 ${status}로 변경`);
    alert(
      `지원자 상태가 ${
        status === "approved" ? "승인" : "거절"
      }으로 변경되었습니다.`
    );
  };

  // 프로젝트 통계
  const projectStats = {
    total: myProjects.length,
    recruiting: myProjects.filter((p) => p.status === "모집중").length,
    inProgress: myProjects.filter((p) => p.status === "진행중").length,
    completed: myProjects.filter((p) => p.status === "완료").length,
  };

  // 지원 현황 통계 (프리랜서용)
  const applicationStats = {
    total: mockFreelancerApplications.length,
    waiting: mockFreelancerApplications.filter((app) => app.status === "대기중")
      .length,
    rejected: mockFreelancerApplications.filter((app) => app.status === "거절")
      .length,
    inProgress: mockFreelancerApplications.filter(
      (app) => app.status === "진행중"
    ).length,
    completed: mockFreelancerApplications.filter((app) => app.status === "완료")
      .length,
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* 헤더 */}
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-4">
            <div className="relative">
              {selectedImage ? (
                <img
                  src={selectedImage}
                  alt="Profile"
                  className="w-20 h-20 rounded-2xl object-cover border-4 border-white shadow-xl"
                />
              ) : (
                <div className="w-20 h-20 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center text-white text-2xl font-bold shadow-xl">
                  {profileData.name.charAt(0)}
                </div>
              )}
            </div>
            <div>
              <h1 className="text-4xl font-bold text-gray-900 mb-2">
                {profileData.name}
              </h1>
              <div className="flex items-center space-x-4">
                <p className="text-lg text-gray-600 flex items-center">
                  <i className="ri-briefcase-line mr-2"></i>
                  {userType === "client" ? "클라이언트" : "프리랜서"}
                </p>
                <div className="flex items-center">
                  <i className="ri-star-fill text-yellow-400 mr-1"></i>
                  <span className="font-bold text-lg text-gray-900">
                    {profileData.averageRating}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-5 gap-8">
          {/* 사이드바 */}
          <div className="lg:col-span-1">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-6 sticky top-8">
              <nav className="space-y-2">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id as any)}
                    className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-xl transition-all duration-200 cursor-pointer ${
                      activeTab === tab.id
                        ? "bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg transform scale-[1.02]"
                        : "text-gray-600 hover:bg-indigo-50 hover:text-indigo-600"
                    }`}
                  >
                    <i className={`${tab.icon} mr-3 text-lg`}></i>
                    {tab.label}
                  </button>
                ))}
              </nav>

              <div className="mt-8 pt-6 border-t border-gray-200">
                <div className="space-y-3">
                  <Link to="/auth/change-password">
                    <Button
                      variant="outline"
                      size="sm"
                      className="w-full rounded-xl"
                    >
                      <i className="ri-lock-password-line mr-2"></i>
                      비밀번호 변경
                    </Button>
                  </Link>
                  <Link to="/auth/delete-account">
                    <Button
                      variant="danger"
                      size="sm"
                      className="w-full rounded-xl"
                    >
                      <i className="ri-delete-bin-line mr-2"></i>
                      계정 탈퇴
                    </Button>
                  </Link>
                </div>
              </div>
            </div>
          </div>

          {/* 메인 콘텐츠 */}
          <div className="lg:col-span-4">
            <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 overflow-hidden">
              {/* 프로필 관리 */}
              {activeTab === "profile" && (
                <div className="p-8">
                  <div className="flex items-center space-x-3 mb-8">
                    <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl">
                      <i className="ri-user-3-line text-white text-xl"></i>
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">
                        프로필 관리
                      </h2>
                      <p className="text-gray-600">계정 정보를 관리하세요</p>
                    </div>
                  </div>

                  <form onSubmit={handleProfileUpdate} className="space-y-8">
                    {/* 프로필 사진 업로드 */}
                    <div className="text-center">
                      <div className="relative inline-block">
                        {selectedImage ? (
                          <img
                            src={selectedImage}
                            alt="Profile"
                            className="w-32 h-32 rounded-full object-cover border-4 border-white shadow-xl"
                          />
                        ) : (
                          <div className="w-32 h-32 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-4xl font-bold shadow-xl">
                            {profileData.name.charAt(0)}
                          </div>
                        )}
                        <label className="absolute bottom-0 right-0 w-10 h-10 bg-white rounded-full flex items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors shadow-lg border-2 border-indigo-100">
                          <i className="ri-camera-line text-indigo-600 text-lg"></i>
                          <input
                            type="file"
                            className="hidden"
                            accept="image/*"
                            onChange={handleImageUpload}
                          />
                        </label>
                      </div>
                      <p className="text-sm text-gray-500 mt-3">
                        프로필 사진을 업로드하세요
                      </p>
                    </div>

                    {/* 나머지 프로필 폼 내용은 동일 */}
                    {userType === "client" ? (
                      <>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <Input
                            label="회사명"
                            value={profileData.companyName || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                companyName: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                          <Select
                            label="회사 규모"
                            options={[
                              { value: "스타트업", label: "스타트업 (1-10명)" },
                              {
                                value: "중소기업",
                                label: "중소기업 (11-50명)",
                              },
                              {
                                value: "중견기업",
                                label: "중견기업 (51-300명)",
                              },
                              { value: "대기업", label: "대기업 (300명 이상)" },
                            ]}
                            value={profileData.companySize || ""}
                            onChange={(value) =>
                              setProfileData((prev) => ({
                                ...prev,
                                companySize: value,
                              }))
                            }
                          />
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            회사 소개
                          </label>
                          <textarea
                            rows={4}
                            className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                            value={profileData.companyDescription || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                companyDescription: e.target.value,
                              }))
                            }
                          />
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <Input
                            label="연락처"
                            value={profileData.contact || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                contact: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                          <Input
                            label="이메일"
                            type="email"
                            value={profileData.email}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                email: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <Input
                            label="대표자명"
                            value={profileData.representative || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                representative: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                          <Input
                            label="사업자등록번호"
                            value={profileData.businessNumber || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                businessNumber: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                        </div>
                      </>
                    ) : (
                      <>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          <Input
                            label="이름"
                            value={profileData.name}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                name: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                          <Input
                            label="이메일"
                            type="email"
                            value={profileData.email}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                email: e.target.value,
                              }))
                            }
                            className="rounded-xl"
                          />
                        </div>

                        <Input
                          label="경력"
                          value={profileData.experience || ""}
                          onChange={(e) =>
                            setProfileData((prev) => ({
                              ...prev,
                              experience: e.target.value,
                            }))
                          }
                          className="rounded-xl"
                        />

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            기술 스택
                          </label>
                          <div className="flex flex-wrap gap-2 p-4 border border-gray-200 rounded-xl bg-gray-50">
                            {(profileData.skills || []).map(
                              (skill: string, index: number) => (
                                <span
                                  key={index}
                                  className="px-3 py-1 bg-white text-indigo-700 rounded-full text-sm border border-indigo-200 shadow-sm flex items-center"
                                >
                                  {skill}
                                  <button className="ml-2 text-indigo-400 hover:text-indigo-600 cursor-pointer">
                                    ×
                                  </button>
                                </span>
                              )
                            )}
                            <input
                              type="text"
                              placeholder="새 기술 스택 추가..."
                              className="border-none outline-none text-sm bg-transparent"
                            />
                          </div>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            관심 분야
                          </label>
                          <div className="flex flex-wrap gap-2 p-4 border border-gray-200 rounded-xl bg-gray-50">
                            {(profileData.interests || []).map(
                              (interest: string, index: number) => (
                                <span
                                  key={index}
                                  className="px-3 py-1 bg-white text-gray-700 rounded-full text-sm border border-gray-200 shadow-sm flex items-center"
                                >
                                  {interest}
                                  <button className="ml-2 text-gray-400 hover:text-gray-600 cursor-pointer">
                                    ×
                                  </button>
                                </span>
                              )
                            )}
                            <input
                              type="text"
                              placeholder="새 관심 분야 추가..."
                              className="border-none outline-none text-sm bg-transparent"
                            />
                          </div>
                        </div>

                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            자기소개
                          </label>
                          <textarea
                            rows={4}
                            className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent resize-none"
                            value={profileData.introduction || ""}
                            onChange={(e) =>
                              setProfileData((prev) => ({
                                ...prev,
                                introduction: e.target.value,
                              }))
                            }
                          />
                        </div>

                        {/* 파일 업로드 섹션 */}
                        <div className="space-y-4">
                          <h3 className="text-lg font-semibold text-gray-900">
                            문서 관리
                          </h3>

                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="border-2 border-dashed border-indigo-200 rounded-xl p-6 text-center bg-indigo-50/50">
                              <i className="ri-file-text-line text-3xl text-indigo-400 mb-3"></i>
                              <p className="text-sm text-gray-700 mb-3 font-medium">
                                이력서
                              </p>
                              <Button
                                variant="outline"
                                size="sm"
                                className="rounded-xl"
                              >
                                업로드
                              </Button>
                              <div className="mt-3">
                                <label className="flex items-center justify-center text-xs text-gray-500">
                                  <input type="checkbox" className="mr-1" />
                                  비공개
                                </label>
                              </div>
                            </div>

                            <div className="border-2 border-dashed border-green-200 rounded-xl p-6 text-center bg-green-50/50">
                              <i className="ri-article-line text-3xl text-green-400 mb-3"></i>
                              <p className="text-sm text-gray-700 mb-3 font-medium">
                                자기소개서
                              </p>
                              <Button
                                variant="outline"
                                size="sm"
                                className="rounded-xl"
                              >
                                업로드
                              </Button>
                              <div className="mt-3">
                                <label className="flex items-center justify-center text-xs text-gray-500">
                                  <input type="checkbox" className="mr-1" />
                                  공개
                                </label>
                              </div>
                            </div>

                            <div className="border-2 border-dashed border-purple-200 rounded-xl p-6 text-center bg-purple-50/50">
                              <i className="ri-folder-line text-3xl text-purple-400 mb-3"></i>
                              <p className="text-sm text-gray-700 mb-3 font-medium">
                                포트폴리오
                              </p>
                              <Button
                                variant="outline"
                                size="sm"
                                className="rounded-xl"
                              >
                                업로드
                              </Button>
                              <div className="mt-3">
                                <label className="flex items-center justify-center text-xs text-gray-500">
                                  <input type="checkbox" className="mr-1" />
                                  공개
                                </label>
                              </div>
                            </div>
                          </div>
                        </div>
                      </>
                    )}

                    <div className="flex justify-end space-x-4 pt-8">
                      <Button variant="outline" className="rounded-xl">
                        취소
                      </Button>
                      <Button
                        type="submit"
                        className="rounded-xl bg-gradient-to-r from-indigo-500 to-purple-600"
                      >
                        저장
                      </Button>
                    </div>
                  </form>
                </div>
              )}

              {/* 소셜 계정 연결 관리 */}
              {activeTab === "social" && (
                <div className="p-8">
                  <div className="flex items-center space-x-3 mb-8">
                    <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl">
                      <i className="ri-links-line text-white text-xl"></i>
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-gray-900">
                        소셜 계정 연결
                      </h2>
                      <p className="text-gray-600">
                        소셜 계정을 연결하여 간편하게 로그인하세요
                      </p>
                    </div>
                  </div>

                  <div className="space-y-6">
                    {/* Google 계정 */}
                    <div className="bg-white rounded-xl border border-gray-200 p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-red-50 rounded-xl flex items-center justify-center">
                            <i className="ri-google-fill text-red-500 text-2xl"></i>
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">
                              Google
                            </h3>
                            {socialAccounts.google.connected ? (
                              <div className="space-y-1">
                                <p className="text-sm text-gray-600">
                                  {socialAccounts.google.email}
                                </p>
                                <p className="text-xs text-gray-500">
                                  연결일: {socialAccounts.google.connectedAt}
                                </p>
                              </div>
                            ) : (
                              <p className="text-sm text-gray-500">
                                연결되지 않음
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-3">
                          {socialAccounts.google.connected && (
                            <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                              연결됨
                            </span>
                          )}
                          <Button
                            variant={
                              socialAccounts.google.connected
                                ? "danger"
                                : "primary"
                            }
                            size="sm"
                            onClick={() => handleSocialConnect("google")}
                            className="rounded-xl whitespace-nowrap"
                          >
                            {socialAccounts.google.connected
                              ? "연결 해제"
                              : "연결하기"}
                          </Button>
                        </div>
                      </div>
                    </div>

                    {/* Kakao 계정 */}
                    <div className="bg-white rounded-xl border border-gray-200 p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-yellow-50 rounded-xl flex items-center justify-center">
                            <i className="ri-kakao-talk-fill text-yellow-500 text-2xl"></i>
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">
                              Kakao
                            </h3>
                            {socialAccounts.kakao.connected ? (
                              <div className="space-y-1">
                                <p className="text-sm text-gray-600">
                                  {socialAccounts.kakao.email}
                                </p>
                                <p className="text-xs text-gray-500">
                                  연결일: {socialAccounts.kakao.connectedAt}
                                </p>
                              </div>
                            ) : (
                              <p className="text-sm text-gray-500">
                                연결되지 않음
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-3">
                          {socialAccounts.kakao.connected && (
                            <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                              연결됨
                            </span>
                          )}
                          <Button
                            variant={
                              socialAccounts.kakao.connected
                                ? "danger"
                                : "primary"
                            }
                            size="sm"
                            onClick={() => handleSocialConnect("kakao")}
                            className="rounded-xl whitespace-nowrap"
                          >
                            {socialAccounts.kakao.connected
                              ? "연결 해제"
                              : "연결하기"}
                          </Button>
                        </div>
                      </div>
                    </div>

                    {/* Naver 계정 */}
                    <div className="bg-white rounded-xl border border-gray-200 p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div className="w-12 h-12 bg-green-50 rounded-xl flex items-center justify-center">
                            <i className="ri-naver-fill text-green-500 text-2xl"></i>
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">
                              Naver
                            </h3>
                            {socialAccounts.naver.connected ? (
                              <div className="space-y-1">
                                <p className="text-sm text-gray-600">
                                  {socialAccounts.naver.email}
                                </p>
                                <p className="text-xs text-gray-500">
                                  연결일: {socialAccounts.naver.connectedAt}
                                </p>
                              </div>
                            ) : (
                              <p className="text-sm text-gray-500">
                                연결되지 않음
                              </p>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-3">
                          {socialAccounts.naver.connected && (
                            <span className="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                              연결됨
                            </span>
                          )}
                          <Button
                            variant={
                              socialAccounts.naver.connected
                                ? "danger"
                                : "primary"
                            }
                            size="sm"
                            onClick={() => handleSocialConnect("naver")}
                            className="rounded-xl whitespace-nowrap"
                          >
                            {socialAccounts.naver.connected
                              ? "연결 해제"
                              : "연결하기"}
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* 안내 메시지 */}
                  <div className="mt-8 p-6 bg-blue-50 rounded-xl border border-blue-200">
                    <div className="flex items-start space-x-3">
                      <i className="ri-information-line text-blue-500 text-xl mt-0.5"></i>
                      <div>
                        <h4 className="text-sm font-semibold text-blue-900 mb-2">
                          소셜 계정 연결 안내
                        </h4>
                        <ul className="text-sm text-blue-800 space-y-1">
                          <li>
                            • 각 소셜 서비스당 하나의 계정만 연결할 수 있습니다.
                          </li>
                          <li>
                            • 연결된 소셜 계정으로 간편하게 로그인할 수
                            있습니다.
                          </li>
                          <li>
                            • 계정 연결을 해제해도 기존 계정 정보는 유지됩니다.
                          </li>
                          <li>
                            • 보안을 위해 정기적으로 연결 상태를 확인해주세요.
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* 프로젝트 관리 */}
              {activeTab === "projects" && (
                <div className="h-full">
                  <div className="p-6 border-b border-gray-200">
                    <div className="flex items-center justify-between mb-6">
                      <div className="flex items-center space-x-3">
                        <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl">
                          <i className="ri-briefcase-4-line text-white text-xl"></i>
                        </div>
                        <div>
                          <h2 className="text-3xl font-bold text-gray-900">
                            {userType === "client"
                              ? "프로젝트 관리"
                              : "지원 현황"}
                          </h2>
                          <p className="text-gray-600">
                            {userType === "client"
                              ? "프로젝트 현황을 한눈에 확인하고 관리하세요"
                              : "지원한 프로젝트 현황을 확인하세요"}
                          </p>
                        </div>
                      </div>
                      {userType === "client" && (
                        <Button className="rounded-xl bg-gradient-to-r from-indigo-500 to-purple-600 px-6 py-3">
                          <i className="ri-add-line mr-2"></i>새 프로젝트 등록
                        </Button>
                      )}
                    </div>

                    {userType === "client" ? (
                      <>
                        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-blue-100 text-sm font-medium">
                                  전체 프로젝트
                                </p>
                                <p className="text-3xl font-bold">
                                  {projectStats.total}
                                </p>
                              </div>
                              <i className="ri-briefcase-4-line text-3xl text-blue-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-green-100 text-sm font-medium">
                                  모집중
                                </p>
                                <p className="text-3xl font-bold">
                                  {projectStats.recruiting}
                                </p>
                              </div>
                              <i className="ri-user-add-line text-3xl text-green-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-yellow-500 to-orange-500 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-yellow-100 text-sm font-medium">
                                  진행중
                                </p>
                                <p className="text-3xl font-bold">
                                  {projectStats.inProgress}
                                </p>
                              </div>
                              <i className="ri-play-circle-line text-3xl text-yellow-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-purple-100 text-sm font-medium">
                                  완료
                                </p>
                                <p className="text-3xl font-bold">
                                  {projectStats.completed}
                                </p>
                              </div>
                              <i className="ri-check-double-line text-3xl text-purple-200"></i>
                            </div>
                          </div>
                        </div>

                        {/* 상태 필터 */}
                        <div className="flex space-x-2">
                          {["all", "모집중", "진행중", "완료"].map((status) => (
                            <button
                              key={status}
                              onClick={() =>
                                setProjectStatusFilter(status as any)
                              }
                              className={`px-4 py-2 rounded-xl text-sm font-medium transition-all cursor-pointer ${
                                projectStatusFilter === status
                                  ? "bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg"
                                  : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                              }`}
                            >
                              {status === "all" ? "전체" : status}
                            </button>
                          ))}
                        </div>
                      </>
                    ) : (
                      <>
                        <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
                          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-blue-100 text-sm font-medium">
                                  전체
                                </p>
                                <p className="text-3xl font-bold">
                                  {applicationStats.total}
                                </p>
                              </div>
                              <i className="ri-briefcase-4-line text-3xl text-blue-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-yellow-500 to-yellow-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-yellow-100 text-sm font-medium">
                                  대기중
                                </p>
                                <p className="text-3xl font-bold">
                                  {applicationStats.waiting}
                                </p>
                              </div>
                              <i className="ri-time-line text-3xl text-yellow-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-red-500 to-red-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-red-100 text-sm font-medium">
                                  거절
                                </p>
                                <p className="text-3xl font-bold">
                                  {applicationStats.rejected}
                                </p>
                              </div>
                              <i className="ri-close-circle-line text-3xl text-red-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-green-100 text-sm font-medium">
                                  진행중
                                </p>
                                <p className="text-3xl font-bold">
                                  {applicationStats.inProgress}
                                </p>
                              </div>
                              <i className="ri-play-circle-line text-3xl text-green-200"></i>
                            </div>
                          </div>
                          <div className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl p-6 text-white">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-purple-100 text-sm font-medium">
                                  완료
                                </p>
                                <p className="text-3xl font-bold">
                                  {applicationStats.completed}
                                </p>
                              </div>
                              <i className="ri-check-double-line text-3xl text-purple-200"></i>
                            </div>
                          </div>
                        </div>

                        {/* 상태 필터 */}
                        <div className="flex space-x-2">
                          {["all", "대기중", "거절", "진행중", "완료"].map(
                            (status) => (
                              <button
                                key={status}
                                onClick={() =>
                                  setApplicationStatusFilter(status as any)
                                }
                                className={`px-4 py-2 rounded-xl text-sm font-medium transition-all cursor-pointer ${
                                  applicationStatusFilter === status
                                    ? "bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg"
                                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                                }`}
                              >
                                {status === "all" ? "전체" : status}
                              </button>
                            )
                          )}
                        </div>
                      </>
                    )}
                  </div>

                  {/* 프로젝트 목록 */}
                  <div className="p-6">
                    {userType === "client" ? (
                      <div className="space-y-4">
                        {filteredProjects.map((project) => (
                          <div
                            key={project.id}
                            className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-lg transition-shadow cursor-pointer"
                            onClick={() => setSelectedProject(project.id)}
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="flex items-center space-x-3 mb-2">
                                  <h3 className="text-xl font-bold text-gray-900">
                                    {project.title}
                                  </h3>
                                  <span
                                    className={`px-3 py-1 rounded-full text-xs font-medium ${
                                      project.status === "모집중"
                                        ? "bg-green-100 text-green-800"
                                        : project.status === "진행중"
                                        ? "bg-yellow-100 text-yellow-800"
                                        : "bg-purple-100 text-purple-800"
                                    }`}
                                  >
                                    {project.status}
                                  </span>
                                </div>
                                <p className="text-gray-600 mb-3">
                                  {project.description}
                                </p>
                                <div className="flex items-center text-sm text-gray-500 space-x-4">
                                  <span>
                                    <i className="ri-calendar-line mr-1"></i>
                                    {project.startDate} ~ {project.endDate}
                                  </span>
                                  <span>
                                    <i className="ri-money-dollar-circle-line mr-1"></i>
                                    {project.budget}원
                                  </span>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2 ml-4">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    updateProjectStatus(project.id, "진행중");
                                  }}
                                >
                                  진행중으로 변경
                                </Button>
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    updateProjectStatus(project.id, "완료");
                                  }}
                                >
                                  완료로 변경
                                </Button>
                                <Button
                                  variant="danger"
                                  size="sm"
                                  onClick={(e) => {
                                    e.stopPropagation();
                                    console.log(`프로젝트 ${project.id} 삭제`);
                                    alert("프로젝트가 삭제되었습니다.");
                                  }}
                                >
                                  삭제
                                </Button>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {filteredApplications.map((application) => (
                          <div
                            key={application.id}
                            className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-lg transition-shadow"
                          >
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <div className="flex items-center space-x-3 mb-2">
                                  <h3 className="text-xl font-bold text-gray-900">
                                    {
                                      mockProjects.find(
                                        (p) => p.id === application.projectId
                                      )?.title
                                    }
                                  </h3>
                                  <span
                                    className={`px-3 py-1 rounded-full text-xs font-medium ${
                                      application.status === "대기중"
                                        ? "bg-yellow-100 text-yellow-800"
                                        : application.status === "거절"
                                        ? "bg-red-100 text-red-800"
                                        : application.status === "진행중"
                                        ? "bg-green-100 text-green-800"
                                        : "bg-purple-100 text-purple-800"
                                    }`}
                                  >
                                    {application.status}
                                  </span>
                                </div>
                                <p className="text-gray-600 mb-3">
                                  지원일: {application.applicationDate}
                                </p>
                                <div className="flex items-center text-sm text-gray-500 space-x-4">
                                  <span>
                                    <i className="ri-user-line mr-1"></i>
                                    지원자: {application.freelancerName}
                                  </span>
                                  <span>
                                    <i className="ri-file-text-line mr-1"></i>
                                    {application.documentsSubmitted
                                      ? "문서 제출 완료"
                                      : "문서 미제출"}
                                  </span>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2 ml-4">
                                <Button
                                  variant="primary"
                                  size="sm"
                                  onClick={() =>
                                    updateApplicantStatus(
                                      application.id,
                                      "approved"
                                    )
                                  }
                                >
                                  승인
                                </Button>
                                <Button
                                  variant="danger"
                                  size="sm"
                                  onClick={() =>
                                    updateApplicantStatus(
                                      application.id,
                                      "rejected"
                                    )
                                  }
                                >
                                  거절
                                </Button>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              )}

              {/* 관심 프리랜서/프로젝트 */}
              {activeTab === "bookmarks" && (
                <div className="p-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl">
                      <i className="ri-heart-3-line text-white text-xl"></i>
                    </div>
                    <div>
                      <h2 className="text-3xl font-bold text-gray-900">
                        {userType === "client"
                          ? "관심 프리랜서"
                          : "관심 프로젝트"}
                      </h2>
                      <p className="text-gray-600">
                        {userType === "client"
                          ? "관심 있는 프리랜서를 저장해보세요"
                          : "관심 있는 프로젝트를 저장해보세요"}
                      </p>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {(userType === "client"
                      ? bookmarkedFreelancers
                      : bookmarkedProjects
                    ).map((item) => (
                      <div
                        key={item.id}
                        className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-lg transition-shadow"
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex items-center space-x-3">
                            <div className="w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold">
                              {userType === "client"
                                ? (item as any).name.charAt(0)
                                : (item as any).title.charAt(0)}
                            </div>
                            <div>
                              <h3 className="font-bold text-gray-900">
                                {userType === "client"
                                  ? (item as any).name
                                  : (item as any).title}
                              </h3>
                              <p className="text-sm text-gray-500">
                                {userType === "client"
                                  ? (item as any).specialty
                                  : (item as any).category}
                              </p>
                            </div>
                          </div>
                          <button
                            onClick={() =>
                              removeBookmark(
                                item.id,
                                userType === "client" ? "freelancer" : "project"
                              )
                            }
                            className="text-gray-400 hover:text-red-500 transition-colors"
                          >
                            <i className="ri-close-line text-xl"></i>
                          </button>
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="flex items-center">
                            <i className="ri-star-fill text-yellow-400 mr-1"></i>
                            <span className="font-medium">
                              {userType === "client"
                                ? (item as any).averageRating
                                : (item as any).averageRating}
                            </span>
                          </div>
                          {userType === "client" ? (
                            <span className="text-sm text-gray-500">
                              {(item as any).completedProjects} 완료
                            </span>
                          ) : (
                            <span className="text-sm text-gray-500">
                              {(item as any).budget}원
                            </span>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* 피드백 관리 */}
              {activeTab === "feedback" && (
                <div className="p-6">
                  <div className="flex items-center space-x-3 mb-6">
                    <div className="p-3 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl">
                      <i className="ri-star-line text-white text-xl"></i>
                    </div>
                    <div>
                      <h2 className="text-3xl font-bold text-gray-900">
                        피드백 관리
                      </h2>
                      <p className="text-gray-600">
                        {userType === "client"
                          ? "완료된 프로젝트에 대한 피드백을 확인하세요"
                          : "받은 피드백을 확인하세요"}
                      </p>
                    </div>
                  </div>

                  <div className="space-y-6">
                    {mockFeedback.map((feedback) => (
                      <div
                        key={feedback.id}
                        className="bg-white rounded-xl border border-gray-200 p-6"
                      >
                        <div className="flex items-start space-x-4">
                          <div className="flex-shrink-0">
                            <div className="w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-bold">
                              {userType === "client"
                                ? feedback.freelancer.charAt(0)
                                : feedback.client.charAt(0)}
                            </div>
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center justify-between mb-2">
                              <h3 className="font-bold text-gray-900">
                                {userType === "client"
                                  ? feedback.freelancer
                                  : feedback.client}
                              </h3>
                              <div className="flex items-center">
                                {[...Array(5)].map((_, i) => (
                                  <i
                                    key={i}
                                    className={`ri-star-fill ${
                                      i < feedback.rating
                                        ? "text-yellow-400"
                                        : "text-gray-300"
                                    }`}
                                  ></i>
                                ))}
                              </div>
                            </div>
                            <p className="text-gray-600 mb-3">
                              {feedback.comment}
                            </p>
                            <div className="flex items-center text-sm text-gray-500 space-x-4">
                              <span>
                                <i className="ri-calendar-line mr-1"></i>
                                {feedback.date}
                              </span>
                              <span>
                                <i className="ri-briefcase-line mr-1"></i>
                                {feedback.projectTitle}
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
